// ============================================================================
//  * Copyright (c) 2004, 2005 IBM Corporation
//  * All rights reserved. 
//  * This program and the accompanying materials 
//  * are made available under the terms of the BSD License 
//  * which accompanies this distribution, and is available at
//  * http://www.opensource.org/licenses/bsd-license.php
//  * 
//  * Contributors:
//  *     IBM Corporation - initial implementation
// ============================================================================


// This file contains the implementation of the Forth code words specific
// to PowerPC64.  Some of this is 970-only.

// Set and clear the RM_CI bit in HID4.  Needed for all I/O accesses.
#define SET_CI do { \
	unsigned long hid4; \
	asm volatile("mfspr %0,1012" : "=r"(hid4)); \
	hid4 |= 0x0000010000000000UL; \
	asm volatile("slbia ; sync ; mtspr 1012,%0 ; isync" : "+r"(hid4)); \
} while (0)

#define CLR_CI do { \
	unsigned long hid4; \
	asm volatile("mfspr %0,1012" : "=r"(hid4)); \
	hid4 &= ~0x0000010000000000UL; \
	asm volatile("sync ; mtspr 1012,%0 ; isync" : "+r"(hid4)); \
} while (0)

// The I/O accesses themselves.
PRIM(RB_X40) GET_CHAR1; SET_CI; GET_CHAR2; CLR_CI; GET_CHAR3; MIRP
PRIM(RB_X21) PUT_CHAR1; SET_CI; PUT_CHAR2; CLR_CI; MIRP
PRIM(RW_X40) GET_WORD1; SET_CI; GET_WORD2; CLR_CI; GET_WORD3; MIRP
PRIM(RW_X21) PUT_WORD1; SET_CI; PUT_WORD2; CLR_CI; MIRP
PRIM(RL_X40) GET_LONG1; SET_CI; GET_LONG2; CLR_CI; GET_LONG3; MIRP
PRIM(RL_X21) PUT_LONG1; SET_CI; PUT_LONG2; CLR_CI; MIRP

// 970-specific CPU registers.
PRIM(HID0_X21)
	unsigned long hid0 = TOS.u;
	asm volatile("sync ; mtspr 1008,%0 ; mfspr %0,1008 ; mfspr %0,1008 ; mfspr %0,1008 ; mfspr %0,1008 ; mfspr %0,1008 ; mfspr %0,1008" : "+r"(hid0));
	POP;
MIRP

PRIM(HID0_X40)
	PUSH;
	asm volatile("mfspr %0,1008" : "=r"(TOS));
MIRP

PRIM(HID1_X21)
	unsigned long hid1 = TOS.u;
	asm volatile("mtspr 1009,%0 ; mtspr 1009,%0 ; isync" : "+r"(hid1));
	POP;
MIRP

PRIM(HID1_X40)
	PUSH;
	asm volatile("mfspr %0,1009" : "=r"(TOS));
MIRP

PRIM(HID4_X21)
	unsigned long hid4 = TOS.u;
	asm volatile("sync ; mtspr 1012,%0 ; isync" : "+r"(hid4));
	POP;
MIRP

PRIM(HID4_X40)
	PUSH;
	asm volatile("mfspr %0,1012" : "=r"(TOS));
MIRP

PRIM(HID5_X21)
	unsigned long hid5 = TOS.u;
	asm volatile("mtspr 1014,%0" : "+r"(hid5));
	POP;
MIRP

PRIM(HID5_X40)
	PUSH;
	asm volatile("mfspr %0,1014" : "=r"(TOS));
MIRP

// PowerPC special registers.
PRIM(MSR_X21)
	unsigned long msr = TOS.u;
	asm volatile("mtmsrd %0" : "+r"(msr));
	POP;
MIRP

PRIM(MSR_X40)
	PUSH;
	asm volatile("mfmsr %0" : "=r"(TOS));
MIRP

PRIM(SDR1_X21)
	unsigned long sdr1 = TOS.u;
	asm volatile("mtsdr1 %0" : "+r"(sdr1));
	POP;
MIRP

PRIM(SDR1_X40)
	PUSH;
	asm volatile("mfsdr1 %0" : "=r"(TOS));
MIRP

PRIM(PVR_X40)
	PUSH;
	asm volatile("mfpvr %0" : "=r"(TOS));
MIRP

PRIM(PIR_X40)
	PUSH;
	asm volatile("mfspr %0,1023" : "=r"(TOS));
MIRP

PRIM(TBL_X40)
	PUSH;
	asm volatile("mftbl %0" : "=r"(TOS));
MIRP

PRIM(TBU_X40)
	PUSH;
	asm volatile("mftbu %0" : "=r"(TOS));
MIRP

PRIM(DABR_X21)
	unsigned long dabr = TOS.u;
	asm volatile("mtspr 1013,%0" : "+r"(dabr));
	POP;
MIRP

PRIM(DABR_X40)
	PUSH;
	asm volatile("mfspr %0,1013" : "=r"(TOS));
MIRP

PRIM(HIOR_X21)
	unsigned long dabr = TOS.u;
	asm volatile("mtspr 311,%0" : "+r"(dabr));
	POP;
MIRP

PRIM(HIOR_X40)
	PUSH;
	asm volatile("mfspr %0,311" : "=r"(TOS));
MIRP

PRIM(MMCR0_X21)
	unsigned long mmcr0 = TOS.u;
	asm volatile("sync ; mtspr 795,%0 ; isync" : "+r"(mmcr0));
	POP;
MIRP

PRIM(PMC1_X40)
	PUSH;
	asm volatile("sync ; mfspr %0,787" : "=r"(TOS));
MIRP


// Call into the client program.
PRIM(JUMP_X2d_CLIENT)
	TOS.u = call_client(TOS);
MIRP

// Call an object-code only routine.
PRIM(OCO)
	cell p0 = TOS; POP;
	cell p1 = TOS;
	TOS.u = oco(p0, p1);
MIRP

// Hang.  Useful for debugging, believe it or not.
PRIM(CRASH)
	for (;;) ;
MIRP
