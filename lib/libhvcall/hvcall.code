/******************************************************************************
 * Copyright (c) 2004, 2011 IBM Corporation
 * All rights reserved.
 * This program and the accompanying materials
 * are made available under the terms of the BSD License
 * which accompanies this distribution, and is available at
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * Contributors:
 *     IBM Corporation - initial implementation
 *****************************************************************************/

#include <libhvcall.h>
#include <virtio.h>
#include <virtio-blk.h>

// : hv-putchar ( char -- )
PRIM(hv_X2d_putchar)
	char c = TOS.n; POP;
	hv_putchar(c);
MIRP

// : hv-getchar ( -- char )
PRIM(hv_X2d_getchar)
	PUSH;
	TOS.n = hv_getchar();
MIRP

// : hv-haschar ( -- res )
PRIM(hv_X2d_haschar)
	PUSH;
	TOS.n = hv_haschar();
MIRP

// : hv-reg-crq ( unit qaddr qsize -- res )
PRIM(hv_X2d_reg_X2d_crq)
	unsigned long qsize = TOS.u; POP;
	unsigned long qaddr = TOS.u; POP;
	unsigned int unit = TOS.u;
	TOS.n = hv_reg_crq(unit, qaddr, qsize);
MIRP

// : hv-free-crq ( unit -- )
PRIM(hv_X2d_free_X2d_crq)
	unsigned int unit = TOS.u; POP;
	hv_free_crq(unit);
MIRP

// : hv-send-crq ( unit msgaddr -- rc )
PRIM(hv_X2d_send_X2d_crq)
	uint64_t *msgaddr = (uint64_t *)TOS.u; POP;
	unsigned int unit = TOS.u;
	TOS.n = hv_send_crq(unit, msgaddr);
MIRP

// : hv-put-tce ( liobn ioba tce -- rc )
PRIM(hv_X2d_put_X2d_tce)
	uint64_t tce = TOS.u; POP;
	uint64_t ioba = TOS.u; POP;
	uint32_t liobn = TOS.u;
	TOS.u = hv_generic(H_PUT_TCE, liobn, ioba, tce);
MIRP

PRIM(RB_X40)
	unsigned long qaddr = TOS.u;
	TOS.u = hv_logical_ci_load(1, qaddr);
MIRP
PRIM(RB_X21)
	unsigned long qaddr = TOS.u; POP;
	unsigned char val = TOS.u; POP;
	hv_logical_ci_store(1, qaddr, val);
MIRP
PRIM(RW_X40)
	unsigned long qaddr = TOS.u;
	TOS.u = hv_logical_ci_load(2, qaddr);
MIRP
PRIM(RW_X21)
	unsigned long qaddr = TOS.u; POP;
	unsigned short val = TOS.u; POP;
	hv_logical_ci_store(2, qaddr, val);
MIRP
PRIM(RL_X40)
	unsigned long qaddr = TOS.u;
	TOS.u = hv_logical_ci_load(4, qaddr);
MIRP
PRIM(RL_X21)
	unsigned long qaddr = TOS.u; POP;
	unsigned int val = TOS.u; POP;
	hv_logical_ci_store(4, qaddr, val);
MIRP
PRIM(RX_X40)
	unsigned long qaddr = TOS.u;
	TOS.u = hv_logical_ci_load(8, qaddr);
MIRP
PRIM(RX_X21)
	unsigned long qaddr = TOS.u; POP;
	unsigned long val = TOS.u; POP;
	hv_logical_ci_store(8, qaddr, val);
MIRP


// : virtio-vring-size  ( queuesize -- ringsize )
PRIM(virtio_X2d_vring_X2d_size)
	TOS.u = virtio_vring_size(TOS.u);
MIRP

// : virtio-get-qsize  ( dev queue -- queuesize )
PRIM(virtio_X2d_get_X2d_qsize)
	int queue = TOS.u; POP;
	TOS.u = virtio_get_qsize(TOS.a, queue);
MIRP

// : virtio-get-config  ( dev offset size -- val )
PRIM(virtio_X2d_get_X2d_config)
	int size = TOS.u; POP;
	int offset = TOS.u; POP;
	TOS.u = virtio_get_config(TOS.a, offset, size);
MIRP

// : virtio-blk-init ( dev -- )
PRIM(virtio_X2d_blk_X2d_init)
	void *dev = TOS.a; POP;
	virtioblk_init(dev);
MIRP

// : virtio-blk-shutdown ( dev -- )
PRIM(virtio_X2d_blk_X2d_shutdown)
	void *dev = TOS.a; POP;
	virtioblk_shutdown(dev);
MIRP

// : virtio-blk-read ( dev blkno cnt reg -- #read )
PRIM(virtio_X2d_blk_X2d_read)
	void *dev = TOS.a; POP;
	long cnt = TOS.n; POP;
	long blkno = TOS.n; POP;
	void *buf = TOS.a;
	TOS.n = virtioblk_read(dev, buf, blkno, cnt);
MIRP
